"use strict";
// Copyright (c) 2017, Shellyl_N and Authors
// license: ISC
// https://github.com/shellyln
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = exports.LoggerLogLevel = void 0;
const is_node_1 = require("../runtime/is-node");
var LoggerLogLevel;
(function (LoggerLogLevel) {
    LoggerLogLevel[LoggerLogLevel["NO_LOG"] = 0] = "NO_LOG";
    LoggerLogLevel[LoggerLogLevel["ERROR"] = 1] = "ERROR";
    LoggerLogLevel[LoggerLogLevel["PRODUCTION"] = 1] = "PRODUCTION";
    LoggerLogLevel[LoggerLogLevel["ASSERT"] = 2] = "ASSERT";
    LoggerLogLevel[LoggerLogLevel["WARN"] = 3] = "WARN";
    LoggerLogLevel[LoggerLogLevel["STAGING"] = 3] = "STAGING";
    LoggerLogLevel[LoggerLogLevel["INFO"] = 4] = "INFO";
    LoggerLogLevel[LoggerLogLevel["LOG"] = 5] = "LOG";
    LoggerLogLevel[LoggerLogLevel["DEVELOPMENT"] = 5] = "DEVELOPMENT";
    LoggerLogLevel[LoggerLogLevel["TRACE"] = 6] = "TRACE";
    LoggerLogLevel[LoggerLogLevel["DEBUG"] = 6] = "DEBUG";
    LoggerLogLevel[LoggerLogLevel["VERBOSE"] = 6] = "VERBOSE";
})(LoggerLogLevel = exports.LoggerLogLevel || (exports.LoggerLogLevel = {}));
class Logger {
    static assert(test, message, ...optionalParams) {
        if (this.logLevel <= LoggerLogLevel.PRODUCTION) {
            return this;
        }
        let succeeded = false;
        try {
            succeeded = Boolean(test);
        }
        catch (e) {
            succeeded = false;
        }
        if (!succeeded) {
            try {
                Logger.con.assert(test, message, ...optionalParams);
            }
            catch (e) {
                // node's assert() throws AssertionError.
                if (this.logLevel <= LoggerLogLevel.STAGING) {
                    throw e;
                }
            }
            if (this.logLevel <= LoggerLogLevel.STAGING) {
                let m = "";
                try {
                    m = String(message);
                }
                catch (e) { }
                throw new Error("Assertion failed:" + m);
            }
        }
        return this;
    }
    static dir(value, ...optionalParams) {
        if (this.logLevel <= LoggerLogLevel.DEBUG) {
            return this;
        }
        try {
            Logger.con.dir(value, ...optionalParams);
        }
        catch (e) { }
        return this;
    }
    static error(message, ...optionalParams) {
        if (this.logLevel < LoggerLogLevel.ERROR) {
            return this;
        }
        try {
            Logger.con.error(message, ...optionalParams);
        }
        catch (e) { }
        return this;
    }
    static info(message, ...optionalParams) {
        if (this.logLevel < LoggerLogLevel.INFO) {
            return this;
        }
        try {
            Logger.con.info(message, ...optionalParams);
        }
        catch (e) { }
        return this;
    }
    static log(message, ...optionalParams) {
        if (this.logLevel < LoggerLogLevel.LOG) {
            return this;
        }
        try {
            Logger.con.log(message, ...optionalParams);
        }
        catch (e) { }
        return this;
    }
    static time(timerName) {
        if (this.logLevel <= LoggerLogLevel.DEBUG) {
            return this;
        }
        try {
            Logger.con.time(timerName);
        }
        catch (e) { }
        return this;
    }
    static timeEnd(timerName) {
        if (this.logLevel <= LoggerLogLevel.DEBUG) {
            return this;
        }
        try {
            Logger.con.timeEnd(timerName);
        }
        catch (e) { }
        return this;
    }
    static trace(message, ...optionalParams) {
        if (this.logLevel < LoggerLogLevel.TRACE) {
            return this;
        }
        try {
            Logger.con.trace(message, ...optionalParams);
        }
        catch (e) { }
        return this;
    }
    static warn(message, ...optionalParams) {
        if (this.logLevel < LoggerLogLevel.WARN) {
            return this;
        }
        try {
            Logger.con.warn(message, ...optionalParams);
        }
        catch (e) { }
        return this;
    }
}
exports.Logger = Logger;
/** static constructor */
// tslint:disable-next-line:variable-name
Logger.__ctor = (() => {
    if (is_node_1.default) {
        Logger.con = new console.Console(process.stderr);
        if (process.env.NODE_ENV) {
            switch (process.env.NODE_ENV) {
                case "production":
                    Logger.logLevel = LoggerLogLevel.PRODUCTION;
                    break;
                case "staging":
                    Logger.logLevel = LoggerLogLevel.STAGING;
                    break;
                case "development":
                default:
                    Logger.logLevel = LoggerLogLevel.DEVELOPMENT;
                    break;
            }
        }
    }
    else {
        Logger.con = console;
        Logger.logLevel = LoggerLogLevel.DEVELOPMENT;
    }
})();
//# sourceMappingURL=Logger.js.map