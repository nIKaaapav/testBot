export declare enum StreamSeekOrigin {
    Start = 0,
    Current = 1,
    End = 2
}
/** MSB first */
export declare class BitStreamWriter {
    static fromBytes(initialSizeBytes: number, bytes: ArrayLike<number>): BitStreamWriter;
    private data;
    private pos;
    constructor(initialSizeBytes: number, data?: Uint8Array);
    writeBits8(v: number, bitLength: number): BitStreamWriter;
    writeBits(v: number, bitLength: number): BitStreamWriter;
    writeBitsFromArray(bytes: Uint8Array, bitOffset: number, bitLength: number): BitStreamWriter;
    seek(bitOffset: number, offset: StreamSeekOrigin): BitStreamWriter;
    resize(sizeBytes: number): BitStreamWriter;
    writeAlignedSingleByte(v: number): BitStreamWriter;
    writeAlignedBytes(bytes: Uint8Array, byteOffset: number, byteLength: number): BitStreamWriter;
    toBytes(): Uint8Array;
    get byteLength(): number;
    get bitLength(): number;
    slice(startBit: number, endBit: number): BitStreamWriter;
    setBit(i: number, v: number): void;
    getBit(i: number): number;
    setByte(i: number, v: number): void;
    getByte(i: number): number;
    concat(...a: BitStreamWriter[]): BitStreamWriter;
    static concat(...a: BitStreamWriter[]): BitStreamWriter;
}
